{"version":3,"sources":["worker.js"],"names":["calcIndexArr","imageData","config","greyArr","calcGreyArr","elementSize","elementCount","size","indexArr","pointer","xLinePosition","blockLineCount","length","sum","i","j","push","Math","round","arr","data","onmessage","e","calcArr","postMessage"],"mappings":";AAMA,SAASA,EAAaC,EAAWC,GACzBC,MAAAA,EAAUC,EAAYH,IACtB,YAAEI,EAAF,aAAeC,EAAf,KAA6BC,GAASL,EACtCM,EAAW,GACbC,IAAAA,EAAU,EACVC,EAAgB,EACdC,MAAAA,EAAiBJ,EAAKF,EACtBI,KAAAA,EAAUN,EAAQS,QAAQ,CAC1BC,IAAAA,EAAM,EACL,IAAA,IAAIC,EAAI,EAAGA,EAAIT,EAAaS,IAC1B,IAAA,IAAIC,EAAI,EAAGA,EAAIV,EAAaU,IAC/BF,GAAOV,EAAQM,EAAUM,EAAKR,EAAKO,GAGvCN,EAASQ,KAAKC,KAAKC,MAAML,EAAKR,GAAa,GAAI,EAAEC,KAC7CI,GAAkBH,EAAKF,EAAe,GACxCI,GAAWE,GAAkBJ,EAAOF,GACpCK,EAAgB,IAEhBD,GAAWJ,EACXK,KAGGF,OAAAA,EAGT,SAASJ,EAAYH,GACfkB,IAAAA,EAAM,GACL,IAAA,IAAIL,EAAI,EAAGA,EAAIb,EAAUmB,KAAKR,OAAQE,GAAG,EAC5CK,EAAIH,MAAwB,GAAlBf,EAAUmB,KAAKN,GAA6B,IAApBb,EAAUmB,KAAKN,EAAE,GAA8B,IAApBb,EAAUmB,KAAKN,EAAE,IAAS,KAElFK,OAAAA,EArCTE,UAAY,SAASC,GACb,MAACH,EAAKjB,GAAUoB,EAAEF,KAClBG,EAAUvB,EAAamB,EAAKjB,GAClCsB,YAAYD","file":"worker.4db8960c.js","sourceRoot":"../src","sourcesContent":["onmessage = function(e) {\n  const [arr, config] = e.data;\n  const calcArr = calcIndexArr(arr, config)\n  postMessage(calcArr)\n};\n\nfunction calcIndexArr(imageData, config) {\n  const greyArr = calcGreyArr(imageData);\n  const { elementSize, elementCount, size } = config;\n  const indexArr = [];\n  let pointer = 0;\n  let xLinePosition = 0;\n  const blockLineCount = size*elementSize;\n  while(pointer < greyArr.length) {\n    let sum = 0;\n    for (let i = 0; i < elementSize; i++) {\n      for (let j = 0; j < elementSize; j++) {\n        sum += greyArr[pointer + j + (size*i)]\n      }\n    }\n    indexArr.push(Math.round(sum/(elementSize**2)/(1/elementCount)));\n    if (xLinePosition >= (size/elementSize) - 1) {\n      pointer += blockLineCount - (size - elementSize);\n      xLinePosition = 0;\n    } else {\n      pointer += elementSize;\n      xLinePosition++;\n    }\n  }\n  return indexArr\n}\n\nfunction calcGreyArr(imageData) {\n  let arr = [];\n  for (let i = 0; i < imageData.data.length; i+=4) {\n    arr.push((imageData.data[i]*0.3 + imageData.data[i+1]*0.59 + imageData.data[i+2]*0.11)/255)\n  }\n  return arr;\n}\n"]}