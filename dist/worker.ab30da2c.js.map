{"version":3,"sources":["worker.js"],"names":["onmessage","e","arr","config","data","calcArr","calcIndexArr","postMessage","imageData","greyArr","calcGreyArr","elementSize","elementCount","size","indexArr","pointer","xLinePosition","blockLineCount","length","sum","i","j","push","Math","round"],"mappings":"AAAAA,SAAS,GAAG,mBAASC,CAAT,EAAY;AACtB,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBF,CAAC,CAACG,IAAxB;AACA,QAAMC,OAAO,GAAGC,YAAY,CAACJ,GAAD,EAAMC,MAAN,CAA5B;AACAI,EAAAA,WAAW,CAACF,OAAD,CAAX;AACD,CAJD;;AAMA,SAASC,YAAT,CAAsBE,SAAtB,EAAiCL,MAAjC,EAAyC;AACvC,QAAMM,OAAO,GAAGC,WAAW,CAACF,SAAD,CAA3B;AACA,QAAM;AAAEG,IAAAA,WAAF;AAAeC,IAAAA,YAAf;AAA6BC,IAAAA;AAA7B,MAAsCV,MAA5C;AACA,QAAMW,QAAQ,GAAG,EAAjB;AACA,MAAIC,OAAO,GAAG,CAAd;AACA,MAAIC,aAAa,GAAG,CAApB;AACA,QAAMC,cAAc,GAAGJ,IAAI,GAACF,WAA5B;;AACA,SAAMI,OAAO,GAAGN,OAAO,CAACS,MAAxB,EAAgC;AAC9B,QAAIC,GAAG,GAAG,CAAV;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,WAApB,EAAiCS,CAAC,EAAlC,EAAsC;AACpC,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,WAApB,EAAiCU,CAAC,EAAlC,EAAsC;AACpCF,QAAAA,GAAG,IAAIV,OAAO,CAACM,OAAO,GAAGM,CAAV,GAAeR,IAAI,GAACO,CAArB,CAAd;AACD;AACF;;AACDN,IAAAA,QAAQ,CAACQ,IAAT,CAAcC,IAAI,CAACC,KAAL,CAAWL,GAAG,GAAER,WAAW,IAAE,CAAlB,IAAsB,IAAEC,YAAxB,CAAX,CAAd;;AACA,QAAII,aAAa,IAAKH,IAAI,GAACF,WAAN,GAAqB,CAA1C,EAA6C;AAC3CI,MAAAA,OAAO,IAAIE,cAAc,IAAIJ,IAAI,GAAGF,WAAX,CAAzB;AACAK,MAAAA,aAAa,GAAG,CAAhB;AACD,KAHD,MAGO;AACLD,MAAAA,OAAO,IAAIJ,WAAX;AACAK,MAAAA,aAAa;AACd;AACF;;AACD,SAAOF,QAAP;AACD;;AAED,SAASJ,WAAT,CAAqBF,SAArB,EAAgC;AAC9B,MAAIN,GAAG,GAAG,EAAV;;AACA,OAAK,IAAIkB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,SAAS,CAACJ,IAAV,CAAec,MAAnC,EAA2CE,CAAC,IAAE,CAA9C,EAAiD;AAC/ClB,IAAAA,GAAG,CAACoB,IAAJ,CAAS,CAACd,SAAS,CAACJ,IAAV,CAAegB,CAAf,IAAkB,GAAlB,GAAwBZ,SAAS,CAACJ,IAAV,CAAegB,CAAC,GAAC,CAAjB,IAAoB,IAA5C,GAAmDZ,SAAS,CAACJ,IAAV,CAAegB,CAAC,GAAC,CAAjB,IAAoB,IAAxE,IAA8E,GAAvF;AACD;;AACD,SAAOlB,GAAP;AACD","file":"worker.ab30da2c.js","sourceRoot":"../src","sourcesContent":["onmessage = function(e) {\n  const [arr, config] = e.data;\n  const calcArr = calcIndexArr(arr, config)\n  postMessage(calcArr)\n};\n\nfunction calcIndexArr(imageData, config) {\n  const greyArr = calcGreyArr(imageData);\n  const { elementSize, elementCount, size } = config;\n  const indexArr = [];\n  let pointer = 0;\n  let xLinePosition = 0;\n  const blockLineCount = size*elementSize;\n  while(pointer < greyArr.length) {\n    let sum = 0;\n    for (let i = 0; i < elementSize; i++) {\n      for (let j = 0; j < elementSize; j++) {\n        sum += greyArr[pointer + j + (size*i)]\n      }\n    }\n    indexArr.push(Math.round(sum/(elementSize**2)/(1/elementCount)));\n    if (xLinePosition >= (size/elementSize) - 1) {\n      pointer += blockLineCount - (size - elementSize);\n      xLinePosition = 0;\n    } else {\n      pointer += elementSize;\n      xLinePosition++;\n    }\n  }\n  return indexArr\n}\n\nfunction calcGreyArr(imageData) {\n  let arr = [];\n  for (let i = 0; i < imageData.data.length; i+=4) {\n    arr.push((imageData.data[i]*0.3 + imageData.data[i+1]*0.59 + imageData.data[i+2]*0.11)/255)\n  }\n  return arr;\n}\n"]}